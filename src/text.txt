require('dotenv').config();
const fs = require('fs');
const path = require('path');
const express = require('express');
const axios = require('axios');
const multer = require('multer');
const qrcode = require('qrcode');
const {
    default: makeWASocket,
    useMultiFileAuthState,
    fetchLatestBaileysVersion,
    DisconnectReason,
} = require('@whiskeysockets/baileys');

const app = express();
const upload = multer({ storage: multer.memoryStorage() });
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const sessions = {}; // { sessionId: { sock, isConnected, currentQR } }

async function startSession(sessionId) {
    const authPath = path.join(__dirname, 'auth', sessionId);
    fs.mkdirSync(authPath, { recursive: true });

    const { state, saveCreds } = await useMultiFileAuthState(authPath);
    const { version } = await fetchLatestBaileysVersion();

    const sock = makeWASocket({
        version,
        auth: state,
        browser: ['Bot', 'Chrome', '1.0'],
    });

    sessions[sessionId] = { sock, isConnected: false, currentQR: '' };

    sock.ev.on('creds.update', saveCreds);

    sock.ev.on('connection.update', async ({ connection, lastDisconnect, qr }) => {
        if (qr) {
            sessions[sessionId].currentQR = qr;
            const qrPath = path.join(__dirname, 'qr_codes', `${sessionId}.png`);
            await qrcode.toFile(qrPath, qr);
            console.log(`📸 QR generated for session: ${sessionId}`);
        }

        if (connection === 'open') {
            console.log(`✅ Session connected: ${sessionId}`);
            sessions[sessionId].isConnected = true;
        }

        if (connection === 'close') {
            const statusCode = lastDisconnect?.error?.output?.statusCode;

            if (statusCode === DisconnectReason.loggedOut) {
                console.log(`❌ Logged out: ${sessionId}`);
                fs.rmSync(authPath, { recursive: true, force: true });
                delete sessions[sessionId];
            } else {
                console.log(`🔁 Reconnecting session: ${sessionId}`);
                await startSession(sessionId);
            }
        }
    });
}

// 📸 GET QR for a session
app.get('/qr/:sessionId', async (req, res) => {
    const { sessionId } = req.params;
    if (!sessions[sessionId]) await startSession(sessionId);

    const qrPath = path.join(__dirname, 'qr_codes', `${sessionId}.png`);
    if (fs.existsSync(qrPath)) {
        return res.sendFile(qrPath);
    }
    return res.status(404).send('QR not generated yet');
});

// 📤 Send message from session
app.post('/send/:sessionId', upload.single('image'), async (req, res) => {
    const { sessionId } = req.params;
    const { number, message } = req.body;
    if (!sessions[sessionId]) return res.status(400).json({ success: false, message: 'Session not connected' });

    const sock = sessions[sessionId].sock;
    const jid = number.includes('@s.whatsapp.net') ? number : `${number}@s.whatsapp.net`;

    try {
        if (req.file) {
            await sock.sendMessage(jid, {
                image: req.file.buffer,
                mimetype: req.file.mimetype,
                caption: message,
            });
        } else if (req.body.image) {
            const response = await axios.get(req.body.image, { responseType: 'arraybuffer' });
            await sock.sendMessage(jid, {
                image: Buffer.from(response.data, 'binary'),
                caption: message,
            });
        } else {
            await sock.sendMessage(jid, { text: message });
        }
        res.status(200).json({ success: true, message: 'Message sent' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ success: false, error: err.message });
    }
});

// 🧪 Health check
app.get('/', (req, res) => {
    res.send('✅ WhatsApp Multi-Session Bot Running');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    fs.mkdirSync('./auth', { recursive: true });
    fs.mkdirSync('./qr_codes', { recursive: true });
    console.log(`🚀 Server started on http://localhost:${PORT}`);
});
